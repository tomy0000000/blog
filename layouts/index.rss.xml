{{- $pctx := . -}}
{{- if .IsHome -}}
  {{ $pctx = .Site }}
{{- end -}}
{{- $pages := slice -}}
{{- if or $.IsHome $.IsSection -}}
  {{- $pages = $pctx.RegularPages -}}
{{- else -}}
  {{- $pages = $pctx.Pages -}}
{{- end -}}
{{- $limit := .Site.Config.Services.RSS.Limit -}}
{{- if ge $limit 1 -}}
  {{- $pages = $pages | first $limit -}}
{{- end -}}
{{- printf "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>" | safeHTML }}
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{{ if eq  .Title  .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{ . }} on {{ end }}{{ .Site.Title }}{{ end }}</title>
    <link>{{ .Permalink }}</link>
    <description>Recent content {{ if ne  .Title  .Site.Title }}{{ with .Title }}in {{ . }} {{ end }}{{ end }}on {{ .Site.Title }}</description>
    {{ with .Site.LanguageCode }}<language>{{ . }}</language>{{ end }}
    {{ with .Site.Copyright }}<copyright>{{ . | markdownify | plainify }}</copyright>{{ end }}
    {{ with .Site.Author.email }}<managingEditor>{{ . }}{{ with $.Site.Author.name }} ({{ . }}){{ end }}</managingEditor>{{ end }}
    {{ with .Site.Author.email }}<webMaster>{{ . }}{{ with $.Site.Author.name }} ({{ . }}){{ end }}</webMaster>{{ end }}
    {{ with .Site.Params.publishDate }}<pubDate>{{ .Format "Mon, 02 Jan 2006 15:04:05 -0700" | safeHTML }}</pubDate>{{ end }}
    {{ if not .Date.IsZero }}<lastBuildDate>{{ .Date.Format "Mon, 02 Jan 2006 15:04:05 -0700" | safeHTML }}</lastBuildDate>{{ end }}
    {{- range .Site.Taxonomies.categories -}}<category>{{ .Page.Title }}</category>{{ end }}
    <generator>Hugo -- gohugo.io</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <docs>https://www.rssboard.org/rss-specification</docs>
    {{ with .Site.Params.rss.ttl }}<ttl>{{ . }}</ttl>{{- end -}}
    {{- if .Site.Params.rss.image -}}
    {{- $fullpath := printf "%s/%s" "static" .Site.Params.rss.image -}}
    {{- if os.FileExists $fullpath -}}
    <image>
      <url>{{ $fullpath | absURL }}</url>
      {{ with .Site.Params.rss.imageTitle }}<title>{{ . }}</title>{{ end }}
      <link>{{ .Permalink }}</link>
      {{ with .Site.Params.rss.imageWidth }}<width>{{ . }}</width>{{ end }}
      {{ with .Site.Params.rss.imageHeight }}<height>{{ . }}</height>{{ end }}
      <description>{{ if eq  .Title  .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{ . }} on {{ end }}{{ .Site.Title }}{{ end }}</description>
    </image>
    {{ end }}
    {{- end -}}
    {{- with .OutputFormats.Get "RSS" -}}
    {{ printf "<atom:link href=%q rel=\"self\" type=%q />" .Permalink .MediaType | safeHTML }}
    {{- end -}}
    {{- range $pages -}}
    {{ $page := . }}
    <item>
      <title>{{ .Title }}</title>
      <link>{{ .Permalink }}</link>
      <description>{{ with .Description }}{{ . }}{{ else }}{{if .IsPage}}{{ .Summary }}{{ else }}{{ with .Site.Params.description }}{{ . }}{{ end }}{{ end }}{{ end }}</description>
      {{ with .Site.Author.email }}<author>{{ . }}{{ with $.Site.Author.name }} ({{ . }}){{ end }}</author>{{ end }}
      {{- with .Params.categories -}}{{ range . }}<category>{{ . }}</category>{{ end }}{{ end }}
      {{- range .Params.images -}}{{ $image := cond (or (hasPrefix . "http://") (hasPrefix . "https://")) (resources.GetRemote .) ($page.Resources.GetMatch .) }}
      {{ if $image }}{{ $imageURL := cond (or (hasPrefix . "http://") (hasPrefix . "https://")) . $image.Permalink }}
      <enclosure url="{{ $imageURL }}" length="{{ len $image.Content }}" type="{{ $image.MediaType }}" />
      {{ else }}{{ warnf "Post OPG image is set, but resource does not exist." $page.File.Path }}{{ end }}{{ end }}
      {{- with .Params.audio -}}{{ $audio := cond (or (hasPrefix . "http://") (hasPrefix . "https://")) (resources.GetRemote .) ($page.Resources.GetMatch .) }}
      {{ if $audio }}{{ $audioURL := cond (or (hasPrefix . "http://") (hasPrefix . "https://")) . $audio.Permalink }}
      <enclosure url="{{ $audioURL }}" length="{{ len $audio.Content }}" type="{{ $audio.MediaType }}" />
      {{ else }}{{ warnf "Post OPG audio is set, but resource does not exist." $page.File.Path }}{{ end }}{{ end }}
      {{- range .Params.videos -}}{{ $video := cond (or (hasPrefix . "http://") (hasPrefix . "https://")) (resources.GetRemote .) ($page.Resources.GetMatch .) }}
      {{ if $video }}{{ $videoURL := cond (or (hasPrefix . "http://") (hasPrefix . "https://")) . $video.Permalink }}
      <enclosure url="{{ $videoURL }}" length="{{ len $video.Content }}" type="{{ $video.MediaType }}" />
      {{ else }}{{ warnf "Post OPG video is set, but resource does not exist." $page.File.Path }}{{ end }}{{ end }}
      <guid>{{ .File.ContentBaseName }}</guid>
      <pubDate>{{ .Date.Format "Mon, 02 Jan 2006 15:04:05 -0700" | safeHTML }}</pubDate>
    </item>
    {{ end }}
  </channel>
</rss>
<!-- Modified from https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/_default/rss.xml -->
